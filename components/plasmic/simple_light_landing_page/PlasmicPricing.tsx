// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tmHzdX77B6mvgMnzXh8j6a
// Component: Agq84LorRu5-S4
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: bsxg5DP_ZQ2YV/component
import Section from "../../Section"; // plasmic-import: W4jr7iHajFphe/component
import Plan from "../../Plan"; // plasmic-import: 9Ir6sNX1dNak24/component
import Bullet from "../../Bullet"; // plasmic-import: xwIRHtKsmDUXhM/component
import LinkButton from "../../LinkButton"; // plasmic-import: MlakmBhDjfuU1/component
import Faq from "../../Faq"; // plasmic-import: xPO0u3U50qni9D/component
import Footer from "../../Footer"; // plasmic-import: m8mvHwuyh5RqE/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xF6fO6-XPkpijp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_simple_light_landing_page.module.css"; // plasmic-import: tmHzdX77B6mvgMnzXh8j6a/projectcss
import * as sty from "./PlasmicPricing.module.css"; // plasmic-import: Agq84LorRu5-S4/css

export type PlasmicPricing__VariantMembers = {
  inactive: "inactive";
};

export type PlasmicPricing__VariantsArgs = {
  inactive?: SingleBooleanChoiceArg<"inactive">;
};

type VariantPropType = keyof PlasmicPricing__VariantsArgs;
export const PlasmicPricing__VariantProps = new Array<VariantPropType>(
  "inactive"
);

export type PlasmicPricing__ArgsType = {};
type ArgPropType = keyof PlasmicPricing__ArgsType;
export const PlasmicPricing__ArgProps = new Array<ArgPropType>();

export type PlasmicPricing__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPricingProps {
  inactive?: SingleBooleanChoiceArg<"inactive">;
  className?: string;
}

function PlasmicPricing__RenderFunc(props: {
  variants: PlasmicPricing__VariantsArgs;
  args: PlasmicPricing__ArgsType;
  overrides: PlasmicPricing__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
      </Head>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__sdeMn)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <Section
              className={classNames("__wab_instance", sty.section__i7Pe)}
              subtitle={
                <React.Fragment>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__b79Xs
                    )}
                  >
                    {
                      "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
                    }
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__zHmY)}
                  >
                    <Plan
                      className={classNames("__wab_instance", sty.plan__rw5Cj)}
                      description={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(defaultcss.all, sty.box__ilKaq)}
                        >
                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet__tjm1G
                            )}
                          >
                            {"Up to 3 forms a month"}
                          </Bullet>

                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet__sKcy5
                            )}
                          >
                            {"10 questions per form"}
                          </Bullet>

                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet__fJcjo
                            )}
                          >
                            {"Integration with Google Sheets"}
                          </Bullet>
                        </p.Stack>
                      }
                      price={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__vgua8
                          )}
                        >
                          {"Free"}
                        </div>
                      }
                    >
                      <LinkButton
                        text={"Get started"}
                        type={"outlineBlue" as const}
                      />
                    </Plan>

                    <Plan
                      className={classNames("__wab_instance", sty.plan__oflIs, {
                        [sty.plan__inactive__oflIsn7H4S]: hasVariant(
                          variants,
                          "inactive",
                          "inactive"
                        )
                      })}
                      description={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(defaultcss.all, sty.box__mvmyG)}
                        >
                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet___3Ox0X
                            )}
                          >
                            <div
                              className={classNames(
                                defaultcss.all,
                                defaultcss.__wab_text,
                                sty.box__zvD4V
                              )}
                            >
                              {"All the features of Free plan"}
                            </div>
                          </Bullet>

                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet__yZnp
                            )}
                          >
                            <div
                              className={classNames(
                                defaultcss.all,
                                defaultcss.__wab_text,
                                sty.box__u9CfA
                              )}
                            >
                              {"Pricing based on form published"}
                            </div>
                          </Bullet>

                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet__jAeRx
                            )}
                          >
                            <div
                              className={classNames(
                                defaultcss.all,
                                defaultcss.__wab_text,
                                sty.box___36GGz
                              )}
                            >
                              {"No monthly subscription fee*"}
                            </div>
                          </Bullet>

                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet__aqx7L
                            )}
                          >
                            {"Integration with Facebook pixel"}
                          </Bullet>
                        </p.Stack>
                      }
                      name={"Team"}
                      price={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__d9R7J
                          )}
                        >
                          {"$3.90/Form"}
                        </div>
                      }
                    >
                      <LinkButton
                        text={"Get started"}
                        type={
                          hasVariant(variants, "inactive", "inactive")
                            ? ("solidBlue" as const)
                            : ("solidBlue" as const)
                        }
                      />
                    </Plan>

                    <Plan
                      className={classNames("__wab_instance", sty.plan___6Fp0M)}
                      description={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(defaultcss.all, sty.box__k3Q1U)}
                        >
                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet__fuKDi
                            )}
                          >
                            {"Up to 1000 responses per month"}
                          </Bullet>

                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet__wrDgY
                            )}
                          >
                            {"Up to 5 forms per month"}
                          </Bullet>

                          <Bullet
                            className={classNames(
                              "__wab_instance",
                              sty.bullet__gNjl9
                            )}
                          >
                            <div
                              className={classNames(
                                defaultcss.all,
                                defaultcss.__wab_text,
                                sty.box__gg3Ol
                              )}
                            >
                              {"Premium support"}
                            </div>
                          </Bullet>
                        </p.Stack>
                      }
                      name={"Enterprise"}
                      price={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__pJooa
                          )}
                        >
                          {"$7.90"}
                        </div>
                      }
                    >
                      <LinkButton
                        text={"Contact us"}
                        type={"outlineBlue" as const}
                      />
                    </Plan>
                  </p.Stack>
                </React.Fragment>
              }
              title={"Pricing"}
            />

            <Section
              className={classNames("__wab_instance", sty.section__aCWkm)}
              subtitle={
                <React.Fragment>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__bh0J
                    )}
                  >
                    {
                      "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
                    }
                  </div>

                  <Faq
                    className={classNames("__wab_instance", sty.faq__qVby1)}
                    slot={
                      "Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
                    }
                  >
                    {"Are there long-term contracts?"}
                  </Faq>

                  <Faq
                    className={classNames("__wab_instance", sty.faq__kyA7H)}
                    slot={
                      "Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
                    }
                  >
                    {"Can I add or remove licenses?"}
                  </Faq>

                  <Faq
                    className={classNames("__wab_instance", sty.faq__p0Hq6)}
                    slot={
                      "Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
                    }
                  >
                    {"Do you offer refunds?"}
                  </Faq>
                </React.Fragment>
              }
              title={"FAQ"}
            />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "footer"],
  header: ["header"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPricing__VariantsArgs;
  args?: PlasmicPricing__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicPricing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPricing__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricing__ArgProps,
      internalVariantPropNames: PlasmicPricing__VariantProps
    });

    return PlasmicPricing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricing";
  } else {
    func.displayName = `PlasmicPricing.${nodeName}`;
  }
  return func;
}

export const PlasmicPricing = Object.assign(
  // Top-level PlasmicPricing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPricing
    internalVariantProps: PlasmicPricing__VariantProps,
    internalArgProps: PlasmicPricing__ArgProps
  }
);

export default PlasmicPricing;
/* prettier-ignore-end */
